
Laboratorio5_NesthorGuillermo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000908  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000760  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049e  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initTimer1Servo>:
volatile uint8_t Estado_pwm = 1;         // Estado inicial del LED (encendido)

void initTimer1Servo(void)
{
	// Configurar PB1 (OC1A) y PB2 (OC1B) como salidas para servos
	DDRB |= (1 << PB1) | (1 << PB2); // PB1 = OC1A, PB2 = OC1B
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	84 b9       	out	0x04, r24	; 4
	
	// Modo PWM, Phase Correct, 10-bit
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  ac:	82 ea       	ldi	r24, 0xA2	; 162
  ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
  b2:	82 e1       	ldi	r24, 0x12	; 18
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Frecuencia PWM ~50Hz (Periodo 20ms)
	ICR1 = 39999; // (16MHz / (8 * 50Hz)) - 1 = 39999
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Valores iniciales (posición central)
	OCR1A = SERVO_CENTER * 2; // Convertir microsegundos a ticks
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	9c e0       	ldi	r25, 0x0C	; 12
  c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = SERVO_CENTER * 2;
  d0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  d8:	08 95       	ret

000000da <initTimer2PWM>:
}

void initTimer2PWM(void)
{
	// Configurar Timer2 para interrupción cada 32us (aproximadamente 31.25kHz de frecuencia base)
	TCCR2A = 0; // Modo normal
  da:	a0 eb       	ldi	r26, 0xB0	; 176
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	1c 92       	st	X, r1
	TCCR2B = (1 << CS21); // Prescaler 8 (16MHz/8 = 2MHz, tick cada 0.5us)
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1 << TOIE2); // Habilitar interrupción por overflow
  e6:	e0 e7       	ldi	r30, 0x70	; 112
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
	TCNT2 = 0; // Iniciar contador en 0
  ee:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	// El overflow ocurrirá cada 256 ticks (128us) pero lo ajustaremos para 64 ticks (32us)
	OCR2A = 64; // Valor de comparación
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1 << WGM21); // Modo CTC
  f8:	8c 91       	ld	r24, X
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	8c 93       	st	X, r24
	TIMSK2 |= (1 << OCIE2A); // Habilitar interrupción por comparación
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <initADC>:
}

void initADC(void)
{
	// Referencia AVcc, ajuste a la izquierda, comenzar con ADC6
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX2) | (1 << MUX1);
 106:	86 e6       	ldi	r24, 0x66	; 102
 108:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	// Habilitar ADC, interrupción del ADC, prescaler de 128
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	8f e8       	ldi	r24, 0x8F	; 143
 112:	80 83       	st	Z, r24
	(1 << ADEN) | (1 << ADIE);

	// Iniciar primera conversión
	ADCSRA |= (1 << ADSC);
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <__vector_21>:
}

// Interrupción del ADC
ISR(ADC_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	if(current_channel == 6)
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current_channel>
 142:	86 30       	cpi	r24, 0x06	; 6
 144:	09 f5       	brne	.+66     	; 0x188 <__vector_21+0x6c>
	{
		adc6_value = ADCH;  // Leer valor de ADC6 (0-255)
 146:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <adc6_value+0x1>
 150:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <adc6_value>
		
		// Mapear valor ADC a rango servo (1000-2000)
		uint16_t servoPos = SERVO_MIN + ((uint32_t)adc6_value * (SERVO_MAX - SERVO_MIN)) / 255;
 154:	a0 e6       	ldi	r26, 0x60	; 96
 156:	b9 e0       	ldi	r27, 0x09	; 9
 158:	0e 94 77 01 	call	0x2ee	; 0x2ee <__umulhisi3>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodsi4>
 168:	20 5e       	subi	r18, 0xE0	; 224
 16a:	3c 4f       	sbci	r19, 0xFC	; 252
		OCR1A = servoPos; // Convertir microsegundos a ticks (0.5us por tick)
 16c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 170:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
		// Cambiar a ADC7 para la próxima lectura
		ADMUX = (ADMUX & 0xF0) | 0x07;
 174:	ec e7       	ldi	r30, 0x7C	; 124
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	87 60       	ori	r24, 0x07	; 7
 17e:	80 83       	st	Z, r24
		current_channel = 7;
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_channel>
 186:	30 c0       	rjmp	.+96     	; 0x1e8 <__vector_21+0xcc>
	}
	else if(current_channel == 7)
 188:	87 30       	cpi	r24, 0x07	; 7
 18a:	09 f5       	brne	.+66     	; 0x1ce <__vector_21+0xb2>
	{
		adc7_value = ADCH;  // Leer valor de ADC7 (0-255)
 18c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <adc7_value+0x1>
 196:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <adc7_value>
		
		// Mapear valor ADC a rango servo (1000-2000)
		uint16_t servoPos = SERVO_MIN + ((uint32_t)adc7_value * (SERVO_MAX - SERVO_MIN)) / 255;
 19a:	a0 e6       	ldi	r26, 0x60	; 96
 19c:	b9 e0       	ldi	r27, 0x09	; 9
 19e:	0e 94 77 01 	call	0x2ee	; 0x2ee <__umulhisi3>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodsi4>
 1ae:	20 5e       	subi	r18, 0xE0	; 224
 1b0:	3c 4f       	sbci	r19, 0xFC	; 252
		OCR1B = servoPos; // Convertir microsegundos a ticks
 1b2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		// Cambiar a ADC5 para leer el tercer potenciómetro
		ADMUX = (ADMUX & 0xF0) | 0x05;
 1ba:	ec e7       	ldi	r30, 0x7C	; 124
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	85 60       	ori	r24, 0x05	; 5
 1c4:	80 83       	st	Z, r24
		current_channel = 5;
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_channel>
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <__vector_21+0xcc>
	}
	else
	{
		// Leer valor del tercer potenciómetro (ADC5)
		pwm_ciclo = ADCH; // Usar el valor directamente como umbral PWM
 1ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pwm_ciclo>
		
		// Volver a ADC6 para la próxima lectura
		ADMUX = (ADMUX & 0xF0) | 0x06;
 1d6:	ec e7       	ldi	r30, 0x7C	; 124
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
		current_channel = 6;
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_channel>
	}
	
	// Iniciar nueva conversión
	ADCSRA |= (1 << ADSC);
 1e8:	ea e7       	ldi	r30, 0x7A	; 122
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	80 83       	st	Z, r24
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_7>:

// Interrupción del Timer2 para PWM manual
ISR(TIMER2_COMPA_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
	contador_pwm++;
 222:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	if(contador_pwm == 0)
 22c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 230:	81 11       	cpse	r24, r1
 232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_7+0x2e>
	{
		// Cuando el contador vuelve a 0, encender el LED
		PORTD |= (1 << PD4);
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	80 61       	ori	r24, 0x10	; 16
 238:	8b b9       	out	0x0b, r24	; 11
		Estado_pwm = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	0f c0       	rjmp	.+30     	; 0x260 <__vector_7+0x4c>
	}
	else if(contador_pwm >= pwm_ciclo && Estado_pwm)
 242:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 246:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pwm_ciclo>
 24a:	98 17       	cp	r25, r24
 24c:	48 f0       	brcs	.+18     	; 0x260 <__vector_7+0x4c>
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	88 23       	and	r24, r24
 254:	29 f0       	breq	.+10     	; 0x260 <__vector_7+0x4c>
	{
		// Cuando alcanza el umbral, apagar el LED
		PORTD &= ~(1 << PD4);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	8b b9       	out	0x0b, r24	; 11
		Estado_pwm = 0;
 25c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <setup>:
	}
}

void setup(void)
{
	cli(); // Deshabilitar interrupciones globales
 26e:	f8 94       	cli

	// Configurar ADC6 (PC6), ADC7 (PC7) y ADC5 (PC5) como entradas
	DDRC &= ~((1 << PC6) | (1 << 7) | (1 << PC5));  // PC5, PC6 y PC7 como entradas
 270:	87 b1       	in	r24, 0x07	; 7
 272:	8f 71       	andi	r24, 0x1F	; 31
 274:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << PC6) | (1 << 7) | (1 << PC5)); // Sin pull-up
 276:	88 b1       	in	r24, 0x08	; 8
 278:	8f 71       	andi	r24, 0x1F	; 31
 27a:	88 b9       	out	0x08, r24	; 8

	// Configurar PD4 como salida para el LED de PWM manual
	DDRD |= (1 << PD4);
 27c:	8a b1       	in	r24, 0x0a	; 10
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PD4);
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	8f 7e       	andi	r24, 0xEF	; 239
 286:	8b b9       	out	0x0b, r24	; 11

	initTimer1Servo(); // Configurar Timer1 para servos
 288:	0e 94 53 00 	call	0xa6	; 0xa6 <initTimer1Servo>
	initTimer2PWM();   // Configurar Timer2 para PWM manual
 28c:	0e 94 6d 00 	call	0xda	; 0xda <initTimer2PWM>
	initADC();
 290:	0e 94 83 00 	call	0x106	; 0x106 <initADC>
	
	sei(); // Habilitar interrupciones globales
 294:	78 94       	sei
 296:	08 95       	ret

00000298 <main>:

void setup(void);

int main(void)
{
	setup();
 298:	0e 94 37 01 	call	0x26e	; 0x26e <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f e9       	ldi	r24, 0x9F	; 159
 29e:	9f e0       	ldi	r25, 0x0F	; 15
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x8>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xe>
 2a6:	00 00       	nop
 2a8:	f9 cf       	rjmp	.-14     	; 0x29c <main+0x4>

000002aa <__udivmodsi4>:
 2aa:	a1 e2       	ldi	r26, 0x21	; 33
 2ac:	1a 2e       	mov	r1, r26
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	fd 01       	movw	r30, r26
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__udivmodsi4_ep>

000002b6 <__udivmodsi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	ee 1f       	adc	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	a2 17       	cp	r26, r18
 2c0:	b3 07       	cpc	r27, r19
 2c2:	e4 07       	cpc	r30, r20
 2c4:	f5 07       	cpc	r31, r21
 2c6:	20 f0       	brcs	.+8      	; 0x2d0 <__udivmodsi4_ep>
 2c8:	a2 1b       	sub	r26, r18
 2ca:	b3 0b       	sbc	r27, r19
 2cc:	e4 0b       	sbc	r30, r20
 2ce:	f5 0b       	sbc	r31, r21

000002d0 <__udivmodsi4_ep>:
 2d0:	66 1f       	adc	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	1a 94       	dec	r1
 2da:	69 f7       	brne	.-38     	; 0x2b6 <__udivmodsi4_loop>
 2dc:	60 95       	com	r22
 2de:	70 95       	com	r23
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	9b 01       	movw	r18, r22
 2e6:	ac 01       	movw	r20, r24
 2e8:	bd 01       	movw	r22, r26
 2ea:	cf 01       	movw	r24, r30
 2ec:	08 95       	ret

000002ee <__umulhisi3>:
 2ee:	a2 9f       	mul	r26, r18
 2f0:	b0 01       	movw	r22, r0
 2f2:	b3 9f       	mul	r27, r19
 2f4:	c0 01       	movw	r24, r0
 2f6:	a3 9f       	mul	r26, r19
 2f8:	70 0d       	add	r23, r0
 2fa:	81 1d       	adc	r24, r1
 2fc:	11 24       	eor	r1, r1
 2fe:	91 1d       	adc	r25, r1
 300:	b2 9f       	mul	r27, r18
 302:	70 0d       	add	r23, r0
 304:	81 1d       	adc	r24, r1
 306:	11 24       	eor	r1, r1
 308:	91 1d       	adc	r25, r1
 30a:	08 95       	ret

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
